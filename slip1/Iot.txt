Question 

a. Draw block diagram /pin diagram of Raspberry-Pi/ Beagle board
/Arduino Uno board interfacing with IR Sensor/Temperature
Sensor/Camera.
(Internal Examiner assign any one option for board and interface device
and respective interface programming option)
b. WAP in python/C++ language to blink LED.
c. Write down the observations on Input and Output
d. Write down the Result and Conclusio, using c++

Answer

a. Here's a block diagram showing Raspberry Pi interfacing with an IR sensor:

        +-----------------------------------+
        |              Raspberry Pi         |
        +-----------------------------------+
        |                GPIO               |
        |                                   |
        |    +-------------------------+    |
        |    |         IR Sensor       |    |
        |    +-------------------------+    |
        |                                   |
        +-----------------------------------+
b. Here's a simple Python program to blink an LED:

python



import RPi.GPIO as GPIO
import time

# Set up GPIO
GPIO.setmode(GPIO.BOARD)
GPIO.setup(11, GPIO.OUT)

# Blink LED
while True:
    GPIO.output(11, GPIO.HIGH)
    time.sleep(1)
    GPIO.output(11, GPIO.LOW)
    time.sleep(1)




c. Observations:

When the program runs, the LED blinks on and off at 1-second intervals.
The GPIO pin set to output (pin 11 in this case) controls the LED state.



d. Result and Conclusion:

The LED blinks on and off, indicating that the GPIO pin is correctly configured and functioning.
This simple program demonstrates how to control an LED using Raspberry Pi GPIO and Python.




Here's a simple C++ program to blink an LED connected to a GPIO pin on a Raspberry Pi:

cpp


#include <iostream>
#include <wiringPi.h>

int main() {
    // Initialize the wiringPi library
    if (wiringPiSetup() == -1) {
        std::cerr << "Error initializing wiringPi.\n";
        return 1;
    }

    // Set pin 0 (GPIO 17) as output
    pinMode(0, OUTPUT);

    // Blink the LED
    while (true) {
        digitalWrite(0, HIGH);  // Turn LED on
        delay(1000);            // Delay for 1 second
        digitalWrite(0, LOW);   // Turn LED off
        delay(1000);            // Delay for 1 second
    }

    return 0;
}
To compile this program, you'll need to link against the wiringPi library. You can do this using the following command:


g++ -o blink blink.cpp -lwiringPi


This program uses the wiringPi library to control the GPIO pins. It sets pin 0 (which corresponds to physical pin 11 on the Raspberry Pi) as an output pin and then alternates between turning the LED on and off at 1-second intervals.